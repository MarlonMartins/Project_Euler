################################################################################
##                 Problem 02 : Even Fibonnaci numbers                        ##
################################################################################
# Each new term in the Fibonacci sequence is generated by adding the previous  #
# two terms. By starting with 1 and 2, the first 10 terms will be:             #
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...                                       #
# By considering the terms in the Fibonacci sequence whose values do not       #
# exceed four million, find the sum of the even-valued terms.                  #
################################################################################
################################################################################
# FIRST APPROACH: This solution is simple, but it is not efficient, since it
# calculates the same values many times.

def recursive_fibonacci(n):
    if n < 2:
        return n
    return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)

# SECOND APPROACH: This solution is still simple, but it is more efficient,
# reaching a computational complexity of O(n)
# calculates the same values many times.

def iterative_fibonacci(n):
    next_ = 1
    previous = 0
    for _ in range(0,n):
        sum_ = next_ + previous
        previous = next_
        next_ = sum_
    return previous

def is_even(n):
    return n % 2 == 0

def main():
  limit = 4000000
  even_values = []
  n = 0
  fibonacci_n = iterative_fibonacci(n)
  while fibonacci_n < limit:
    if is_even(fibonacci_n):
      even_values.append(fibonacci_n)
    n += 1
    fibonacci_n = iterative_fibonacci(n)

  print("The sum of the even values is {}".format(sum(even_values)))

if __name__ == '__main__':
    main()
